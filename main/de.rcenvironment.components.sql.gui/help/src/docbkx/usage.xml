<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://docbook.org/xml/4.5/docbookx.dtd">
<chapter>
    <title>SQL Component Usage</title>
    <sect1>
        <title>Synopsis</title>
        <para>The SQL components allow the user to access databases. For different scopes, three
            components are provided:</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>SQL Reader: For reading databases, writing is not allowed here.</para>
                </listitem>
                <listitem>
                    <para>SQL Writer: For writing into databases.</para>
                </listitem>
                <listitem>
                    <para>SQL Command: For reading, writing and - if required - also managing
                        databases.</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>Access to MySQL databases is predefined, access to PostgreSQL databases is known to
            work.</para>
    </sect1>
    <sect1>
        <title>Rationale</title>
        <para>To connect an SQL component to a database, so called "profiles" have to be entered in
            the configuration. You can find it in the menu "Help > Open Configuration". Add the
            structure "componentSettings" you can see in the screenshot below adapted to your needs
            on the same level as the "general" structure in the configuration. You can find an
            example of a component configuration in the reference configuration. It can be found in
            "Help > Open Configuration Information" when you double click on "Configuration
            Reference" in the list in the center of the window.</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Label: The name of the connection that will be shown in a dropdown list in
                        the component configuration</para>
                </listitem>
                <listitem>
                    <para>Host: The database URL · Database: The default database/scheme (Please
                        note that for PostgreSQL you have to enter the database, not the
                        scheme)</para>
                </listitem>
                <listitem>
                    <para>User: The user name to access the database</para>
                </listitem>
                <listitem>
                    <para>Password: The user’s password</para>
                </listitem>
                <listitem>
                    <para>JDBC section: This section is automatically filled and should not be
                        adapted. It contains the automatically generated URL required by RCE (url),
                        the relative path to the JDBC connector library (file) and the driver string
                        required by RCE (driver). If you want to access a PostgreSQL database, adapt
                        the url (postgresql instead of mysql), the connector name and the driver
                        (org.postgresql.Driver instead of com.mysql.jdbc.Driver) accordingly.</para>
                </listitem>
            </itemizedlist>
        </para>
        <para><inlinegraphic fileref="../../images/image001.png"/></para>
        <para>Please note that the user requires all permissions you need for the SQL component
            execution. That means, if the user just has reading permissions on the database you
            won’t be able to store data from RCE in the database using the SQL component with this
            user.</para>
        <para>Then save the file and rename it to de.rcenvironment.components.sql.common.json (i.e.
            remove the “.sample” in the end).</para>
        <para>The profile will appear in the profile dropdown list in the configuration tab of the
            SQL component’s property view.</para>
        <para><inlinegraphic fileref="../../images/image003.png"/></para>
        <para>If you want to provide several profiles, just expand the profiles list in this file
            according to the json syntax.</para>
        <para>This approach has the following benefits:<itemizedlist>
                <listitem>
                    <para>No need to define and manage database connections for every single
                        component.</para>
                </listitem>
                <listitem>
                    <para>As the username and password are stored in a configuration file and not in
                        the workflow itself, you can share workflows carefree.</para>
                </listitem>
            </itemizedlist></para>
    </sect1>
    <sect1>
        <title>Usage</title>
        <para>The SQL components have several functionalities in common. This section describes
            these commonalities and the special properties of each of the components.</para>
        <sect2>
            <title>Common information</title>
            <para>Inputs/Outputs: Each component has two predefined outputs.<itemizedlist>
                    <listitem>
                        <para><emphasis role="italic">meta.tableName</emphasis>: The table name as
                            defined in the component’s configuration can be transferred to another
                            component. This can be useful if you want to make sure every component
                            uses the same table name. </para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="italic">meta.slqSuccess</emphasis> notifies other
                            components about the success of the component’s execution.</para>
                    </listitem>
                </itemizedlist></para>
        </sect2>
        <sect2>
            <title>SQL Reader</title>
            <para>The SQL Reader is a component designed for simple read only access to a database.
                You can define further inputs and outputs. Inputs can be used to dynamically insert
                table or column names to the SQL statement. Outputs are used to hand over the
                results set of the statement to another component. Outputs must be of type
                SmallTable. If you define multiple additional outputs, the results will be written
                to each of the outputs. Please note that you can only execute one statement per run,
                otherwise the following message is shown:</para>
            
            <para><emphasis role="italic">de.rcenvironment.core.component.api.ComponentException:
                    java.lang.RuntimeException:
                    com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException:In the configuration
                    tab you can define the statements according to SQL syntax. There is an init
                    statement to be enabled on the bottom of the text field by checking “execute
                    init statement”. This statement will be executed only when the component runs
                    for the first time, independent from input values. The run statement will be
                    executed on each run of the component. Thus, it depends on input data and can
                    only be inserted when there is a connected input.</emphasis></para>
            <note><para>You can access input variables easily via the dropdown list and
                the “Insert” button below the command text fields.</para></note>
            
        </sect2>
        <sect2>
            <title>SQL Writer</title>
            <para>The SQL Writer component is designed to easily write data to a database without
                any knowledge of SQL syntax. </para>
            <para>Therefore any input of type SmallTable is inserted into the database. If there are
                several inputs they are inserted one after the other. Please note that the structure
                of the input must fit to the structure of the database.</para>
            <para>On the top right you can enter the table name to be referred to. This table can be
                created at runtime (“create” checkbox). Please note that there is an error if the
                table already exists. The table won’t be overwritten to prevent data loss. The table
                can also be deleted after the execution (“drop (on dispose)” checkbox), which can be
                useful if you work with temporal data to release resources afterwards. <note>
                    <para> If you need complex insertion statements, please use the SQL Command
                        component described below.</para>
                </note></para>
        </sect2>
        <sect2>
            <title>SQL Command</title>
            <para>The SQL Command component is a very powerful component designed to read, write and
                – if required - manage databases.</para>
            <para>You can execute all SQL commands according to the user’s permissions.</para>
            <para>It is possible to execute multiple SQL statements within one SQL command
                component. Please note that when you execute multiple SQL statements the result set
                for the first statement will be inserted to all outputs, then the result set for the
                second statement and so forth.<note>
                    <para>You can access input variables easily via the dropdown list and the
                        “Insert” Button below the command text fields.</para>
                </note></para>
        </sect2>
    </sect1>
</chapter>
